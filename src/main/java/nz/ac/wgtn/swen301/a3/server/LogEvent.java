/*
 * Resthome for Logs
 * This is the log service API for ecs.wgtn.ac.nz SWEN301 assignment 3
 *
 * OpenAPI spec version: 1.2.0
 * Contact: jens.dietrich@vuw.ac.nz
 *
 * NOTE: This class is originally auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package nz.ac.wgtn.swen301.a3.server;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import java.util.Date;
import java.util.Objects;
import java.util.UUID;

/**
 * LogEvent
 */
@JsonPropertyOrder({"id", "message", "timestamp", "thread", "logger", "level", "errorDetails"})
public class LogEvent {
    @JsonProperty("id")
    @JsonTypeId
    private UUID id = null;

    @JsonProperty("message")
    private String message = null;

    @JsonProperty("timestamp")
    private Date timestamp = null;

    @JsonProperty("thread")
    private String thread = null;

    @JsonProperty("logger")
    private String logger = null;

    @JsonProperty("level")
    @JsonSerialize()
    private LevelEnum level = null;

    @JsonProperty("errorDetails")
    private String errorDetails = null;

    public LogEvent() {}

    public LogEvent(UUID id, String message, Date timestamp, String thread, String logger, LevelEnum level, String errorDetails) {
        this.id = id;
        this.message = message;
        this.timestamp = timestamp;
        this.thread = thread;
        this.logger = logger;
        this.level = level;
        this.errorDetails = errorDetails;
    }

    public LogEvent(String message, String thread, String logger, LevelEnum level, String errorDetails) {
        this.id = UUID.randomUUID();
        this.timestamp = new Date();
        this.message = message;
        this.thread = thread;
        this.logger = logger;
        this.level = level;
        this.errorDetails = errorDetails;
    }

    /**
     * Get id
     *
     * @return id id
     */
    @JsonProperty("id")
    public UUID getId() {
        return id;
    }

    /**
     * Sets id.
     *
     * @param id the id
     */
    public void setId(UUID id) {
        this.id = id;
    }


    /**
     * Get message
     *
     * @return message message
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * Sets message.
     *
     * @param message the message
     */
    public void setMessage(String message) {
        this.message = message;
    }


    /**
     * a particular timestamp format will not be enforced / acceptance-tested
     *
     * @return timestamp timestamp
     */
    @JsonProperty("timestamp")
    public Date getTimestamp() {
        return timestamp;
    }

    /**
     * Sets timestamp.
     *
     * @param timestamp the timestamp
     */
    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public LevelEnum getLevel() {
        return level;
    }

    /**
     * Get thread
     *
     * @return thread thread
     */
    @JsonProperty("thread")
    public String getThread() {
        return thread;
    }

    /**
     * Sets thread.
     *
     * @param thread the thread
     */
    public void setThread(String thread) {
        this.thread = thread;
    }

    /**
     * this is the name property of the logger
     *
     * @return logger logger
     */
    @JsonProperty("logger")
    public String getLogger() {
        return logger;
    }

    /**
     * Sets logger.
     *
     * @param logger the logger
     */
    public void setLogger(String logger) {
        this.logger = logger;
    }


    /**
     * Get errorDetails
     *
     * @return errorDetails error details
     */
    @JsonProperty("errorDetails")
    public String getErrorDetails() {
        return errorDetails;
    }

    /**
     * Sets error details.
     *
     * @param errorDetails the error details
     */
    public void setErrorDetails(String errorDetails) {
        this.errorDetails = errorDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        var logEvent = (LogEvent) o;
        return Objects.equals(this.id, logEvent.id) &&
            Objects.equals(this.message, logEvent.message) &&
            Objects.equals(this.timestamp, logEvent.timestamp) &&
            Objects.equals(this.thread, logEvent.thread) &&
            Objects.equals(this.logger, logEvent.logger) &&
            Objects.equals(this.level, logEvent.level) &&
            Objects.equals(this.errorDetails, logEvent.errorDetails);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, message, timestamp, thread, logger, level, errorDetails);
    }


    @Override
    public String toString() {
        var sb = new StringBuilder();
        sb.append("class LogEvent {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    thread: ").append(toIndentedString(thread)).append("\n");
        sb.append("    logger: ").append(toIndentedString(logger)).append("\n");
        sb.append("    level: ").append(toIndentedString(level)).append("\n");
        sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

